#!/usr/bin/python3.9



from argparse import ArgumentParser
from os import path
from re import match
from re import search

from knasLogging import KNasLogging
from knasConfFile import KNasConfFile
from knasDataset import KnasDatasetKmnist


class KNas:
	'''
		This class has implemented the Neural Architecture Search through using
		evolutionary methods.
	'''
	def __init__(self,logModule,confModule,datasetModule):

		# Configuration file path
		self.confFilePath = str()

		# KNas logging module handler
		self.logModHand = logModule

		# KNas configuration file module handler
		self.confModHand = confModule

		# KNas dataset handler
		self.datasetHand = datasetModule

		# KNas parameters
		self.knasParams=dict()


	def knas_argument_parser(self):
		'''
			This function has implemented the terminal argument parser of the KNAS
		'''
		
		knasArgParser=ArgumentParser(description='KNAS Program Help')

		knasArgParser.add_argument('-f','--file',  type=str, nargs=1,help='Specify A Config File Name')

		args = knasArgParser.parse_args()

		if args.file:

			self.confFilePath = args.file[0]

			if not path.exists(self.confFilePath):
				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_FOUND'],'ERR')
				exit(1)

		else:
			self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_SPECIFIED'],'ERR')
			exit(1)


	def knas_parse_conig_file(self):
		'''
			This function will parse the configuration file
		'''

		fhandle=open(self.confFilePath)

		fileLines=fhandle.readlines()

		fhandle.close()


		for lineNum,line in enumerate(fileLines):

			line=line.strip()

			# Line number starts from zero, to handle this, we increment it 
			# to adjust it to start from one.
			lineNum+=1

			if line:

				if line.startswith('#'):
					continue

				# TODO inline function return
				value= self.confModHand.get_initlr_value(line)

				if (value): 
					self.knasParams['INIT_LR']= float(value)
					continue

				value= self.confModHand.get_batchSize_value(line)

				if (value): 
					self.knasParams['BATCH_SIZE']= float(value)
					continue


				value= self.confModHand.get_epochs_value(line)

				if (value): 
					self.knasParams['EPOCHS']= float(value)
					continue

				value= self.confModHand.get_trainsplit_value(line)

				if (value): 
					self.knasParams['TRAIN_SPLIT']= float(value)
					continue

				value= self.confModHand.get_device_value(line)

				if (value): 
					self.knasParams['DEVICE']= value
					continue


				value=self.confModHand.get_trainRootDir_value(line)
				if value:
					self.knasParams['TRAIN_ROOT_DIR']=value
					continue

				value=self.confModHand.get_testRootDir_value(line)
				if value:
					self.knasParams['TEST_ROOT_DIR']=value
					continue

				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_DEF_ERR'],'ERR',lineNum)
				exit(1)


	def knas_setup_dataset(self):
		'''
			This function will setup the dataset for the KNAS
		'''

		# Setting the root directory of the training data
		self.datasetHand.set_traindata_root_dir(self.knasParams['TRAIN_ROOT_DIR'])
		
		# Setting the root directory of the testing data
		self.datasetHand.set_testdata_root_dir(self.knasParams['TEST_ROOT_DIR'])


		# Loading the training data
		self.datasetHand.load_traindata()


		# Loading the testing data
		self.datasetHand.load_testdata()







logModule = KNasLogging()
datasetModule = KnasDatasetKmnist()
confModule = KNasConfFile()

knasObj=KNas(logModule,confModule,datasetModule)

knasObj.knas_argument_parser()


knasObj.knas_parse_conig_file()

knasObj.knas_setup_dataset()



