#!/usr/bin/python3.9

from knasLogging import KNasLogging
from knasConfFile import KNasConfFile
from knasDataset import KnasDatasetKmnist
from knasModel import KNasModel
from knasEA import KNasEA
from argparse import ArgumentParser
from random import choices
from os import path
from torch import cuda


class KNas:
	'''
		This class has implemented the Neural Architecture Search through using
		evolutionary methods.
	'''
	def __init__(self):

		# Configuration file path
		self.confFilePath = str()

		# KNas parameters
		self.knasParams=dict()

		# KNas logging module handler
		self.logModHand = KNasLogging()

		# KNas dataset module
		self.datasetModule = None

		# KNas configuration file module handler
		self.confModHand = KNasConfFile()

		# KNas EA algorithm handler
		self.eaAlgo = None




	def knas_argument_parser(self):
		'''
			This function has implemented the terminal argument parser of the KNAS
		'''
		
		knasArgParser=ArgumentParser(description='KNAS Program Help')

		knasArgParser.add_argument('-f','--file',  type=str, nargs=1,help='Specify A Config File Name')

		args = knasArgParser.parse_args()

		if args.file:

			self.confFilePath = args.file[0]

			if not path.exists(self.confFilePath):
				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_FOUND'],'ERR')
				exit(1)

		else:
			self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_SPECIFIED'],'ERR')
			exit(1)


	def knas_parse_conig_file(self):
		'''
			This function will parse the configuration file
		'''

		status,val = self.confModHand.get_parameters(self.confFilePath)

		if not status:
				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_DEF_ERR'],'ERR',val)
				exit(1)

		# If it was success, val is the dictionary of the parameters
		self.knasParams=val


		# If the device has been set as cuda, but the system does not support it, change the 
		# device to cpu
		if ( not cuda.is_available() ) and ( self.knasParams["DEVICE"] == "cuda"):
				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CUDA_DEVICE_SWITCH'],'INF')
				self.knasParams["DEVICE"] = "cpu"



	def start_evaluation(self):
		'''
			This is the main function of the KNAS program. This will start the
			EA algorithm and use the KNAS model classes to evaluate each individual and so on.
		'''

		# First set the dataset module
		self.datasetModule =  KnasDatasetKmnist(self.knasParams['INPUT_DIM'])

		# First set the EA algorithm handler
		self.eaAlgo = KNasEA(self.datasetModule,self.knasParams)


		# Initial population of the process
		population=self.eaAlgo.knasea_generate_initial_population()

		# Population size
		popSize = len(population)


		# Evaluating the initial population
		population = self.eaAlgo.knasea_calculate_fitness(population)





		# Generation count for this evaluation is the termination condition

		for i in range(self.eaAlgo.genNum):

			print("GEN: ",i)
			

			'''
				Selection
			'''

			# Choose two individuals randomly from the population
			print("Selection")
			ind1 , ind2 = tuple(choices(population,k=2))

			'''
				Crossover
			'''
			print("Crossover")
			off1, off2 = self.eaAlgo.knasea_crossover(ind1,ind2)

			'''
				Mutation
			'''
			print("Mutation")
			
			off1 = self.eaAlgo.knasea_mutation(off1)
		
			# Make the offspring a valid offspring
			off1.make_individual_valid()


			off2 = self.eaAlgo.knasea_mutation(off2)
			
			# Make the offspring a valid offspring
			off2.make_individual_valid()

			

			# Evaluating the offsprings as members of a short time population
			offsPopulation = self.eaAlgo.knasea_calculate_fitness([off1,off2])


			# Add offsprings to the population
			population+= offsPopulation



			'''
				Surivival selection
			'''

			# Sorting the population based on the fitness value first, and then
			# select the population_size individuals from the population
			print("Survival Selection")
	
			population = sorted(population,key=lambda ind: ind.fitnessVal,reverse=True)[:popSize]



		# EA algorithm finished, the first individual is the one with
		# the highest fitness value

		print("EA Finished")
		print("Report: .... ")

		# Best individual
		bestIndividual = population[0]

		print("CN Layers: ")
		for layer in bestIndividual.cnLayersList:
			print(layer)

		print("DFC Layer: ")

		print(bestIndividual.dfcLayer)


		print("Performance staus ...")
		for k,v in bestIndividual.performanceStatus.items():
			print(k,v)

		print("Fitness: ",bestIndividual.fitnessVal)









if __name__ == "__main__":



	# Creating the KNAS program instance
	knasObj=KNas()

	# Calling the argument reader
	knasObj.knas_argument_parser()

	# Parsing the configuration file
	knasObj.knas_parse_conig_file()

	# Starting the evaluation process
	knasObj.start_evaluation()
	
	