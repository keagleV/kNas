#!/usr/bin/python3.9



from argparse import ArgumentParser

from knasLogging import KNasLogging
from knasConfFile import KNasConfFile
from knasDataset import KnasDatasetKmnist
from knasLN import KNasLayersNet
from knasModel import KNasModel
from knasEA import KNasEA

import torch
from torch import cuda
from torch.nn import CrossEntropyLoss
from torch.optim import Adam
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

from os import path
from re import match
from re import search

from time import time
import numpy as np


class KNas:
	'''
		This class has implemented the Neural Architecture Search through using
		evolutionary methods.
	'''
	def __init__(self,logModule,confModule,datasetModule):

		# Configuration file path
		self.confFilePath = str()

		# KNas logging module handler
		self.logModHand = logModule

		# KNas configuration file module handler
		self.confModHand = confModule

		# KNas EA algorithm handler
		self.eaAlgo = KNasEA(6)

		# # KNas dataset handler
		# self.datasetHand = datasetModule

		# KNas parameters
		self.knasParams=dict()


	def knas_argument_parser(self):
		'''
			This function has implemented the terminal argument parser of the KNAS
		'''
		
		knasArgParser=ArgumentParser(description='KNAS Program Help')

		knasArgParser.add_argument('-f','--file',  type=str, nargs=1,help='Specify A Config File Name')

		args = knasArgParser.parse_args()

		if args.file:

			self.confFilePath = args.file[0]

			if not path.exists(self.confFilePath):
				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_FOUND'],'ERR')
				exit(1)

		else:
			self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_NOT_SPECIFIED'],'ERR')
			exit(1)


	def knas_parse_conig_file(self):
		'''
			This function will parse the configuration file
		'''

		fhandle=open(self.confFilePath)

		fileLines=fhandle.readlines()

		fhandle.close()


		for lineNum,line in enumerate(fileLines):

			line=line.strip()

			# Line number starts from zero, to handle this, we increment it 
			# to adjust it to start from one.
			lineNum+=1

			if line:

				if line.startswith('#'):
					continue

				# TODO inline function return
				value= self.confModHand.get_initlr_value(line)

				if (value): 
					self.knasParams['INIT_LR']= float(value)
					continue

				value= self.confModHand.get_batchSize_value(line)

				if (value): 
					self.knasParams['BATCH_SIZE']= int(value)
					continue


				value= self.confModHand.get_epochs_value(line)

				if (value): 
					self.knasParams['EPOCHS']= int(value)
					continue

				value= self.confModHand.get_trainsplit_value(line)

				if (value): 
					self.knasParams['TRAIN_SPLIT']= float(value)
					continue

				value= self.confModHand.get_device_value(line)

				if (value): 
					self.knasParams['DEVICE']= value
					continue


				value=self.confModHand.get_trainRootDir_value(line)
				if value:
					self.knasParams['TRAIN_ROOT_DIR']=value
					continue

				value=self.confModHand.get_testRootDir_value(line)
				if value:
					self.knasParams['TEST_ROOT_DIR']=value
					continue

				value=self.confModHand.get_splitseed_value(line)
				if value:
					self.knasParams['SPLIT_SEED']=int(value)
					continue



				self.logModHand.knas_log_message(self.logModHand.loggingCodes['CONFIG_FILE_DEF_ERR'],'ERR',lineNum)
				exit(1)


	def start_evaluation(self):
		'''
			This is the main function of the KNAS program. This will start the
			EA algorithm and use the KNAS model classes to evaluate each individual and so on.
		'''
		# Initial population of the process
		population=self.eaAlgo.generate_initial_population()




		# Generation count for this evaluation is the termination condition

		for i in range(self.eaAlgo.genNum):
			print(i)

			# Evaluation process

			population = self.eaAlgo.calculate_fitness(population)


			# Selection


			# Crossover


			# Mutation


	




		
	





if __name__ == "__main__":


	#torch.backends.cudnn.enabled = False

	# Creating the logging module for the KNAS
	logModule = KNasLogging()

	# Creating the dataset module for the KNAS
	datasetModule = KnasDatasetKmnist()

	# Creating the config file module for the KNAS
	confModule = KNasConfFile()

	# Creating the KNAS program instance
	knasObj=KNas(logModule,confModule,datasetModule)

	# Calling the argument reader
	knasObj.knas_argument_parser()

	# Parsing the configuration file
	knasObj.knas_parse_conig_file()

	# Starting the evaluation process
	knasObj.start_evaluation()
	# # Setting the dataset up
	# knasObj.knas_setup_dataset()

	# # Run the model
	# knasObj.knas_create_eval_model()


